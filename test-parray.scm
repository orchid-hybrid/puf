;; larceny -r7rs -path . -program test-parray.scm

(import (scheme base)
        (scheme write)
        (persistent array))

(define (print p) (display p) (newline))

(begin
  (print "testing parray")
  (let* ((a1 (parray-allocate 10 'o))
         (a2 #f))
    (unless (eq? 'o (parray-get a1 0))
            (print "fail 1"))
    (unless (eq? 'o (parray-get a1 1))
            (print "fail 2"))
    (set! a2 (parray-set a1 0 'x))
    (unless (eq? 'o (parray-get a1 0))
            (print "fail 3"))
    (unless (eq? 'o (parray-get a1 1))
            (print "fail 4"))
    (unless (eq? 'x (parray-get a2 0))
            (print "fail 5")))
  (let* ((a0 (parray-allocate 7 0))
         (a1 (parray-set a0 1 7))
         (a2 (parray-set a1 2 8))
         (a3 (parray-set a1 2 9)))
    (unless (equal? (list (parray-get a0 0)
                          (parray-get a0 1)
                          (parray-get a0 2))
                    '(0 0 0))
            (print "fail 6"))
    (unless (equal? (list (parray-get a1 0)
                          (parray-get a1 1)
                          (parray-get a1 2))
                    '(0 7 0))
            (print "fail 7"))
    (unless (equal? (list (parray-get a2 0)
                          (parray-get a2 1)
                          (parray-get a2 2))
                    '(0 7 8))
            (print "fail 8"))
    (unless (equal? (list (parray-get a3 0)
                          (parray-get a3 1)
                          (parray-get a3 2))
                    '(0 7 9))
            (print "fail 9")))
  (print "all tests pass")
  (newline))
